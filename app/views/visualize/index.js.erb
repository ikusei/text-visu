
jQuery(document).ready(function() {
  
  var container;
  var camera, scene, renderer;
  var cube, plane;
  var targetRotation = 0;
  var targetRotationX = 0;
  var targetRotationOnMouseDown = 0;
  var targetRotationXOnMouseDown = 0;
  var mouseX = 0;
  var mouseY = 0;
  var mouseXOnMouseDown = 0;
  var mouseYOnMouseDown = 0;
  var innerWidth = <%= @inner_width %>;
  var innerHeight = <%= @inner_height %>;
  var windowHalfX = innerWidth / 2;
  var windowHalfY = innerHeight / 2;
  var cube_size = <%= @cube_size %>;
  var cube_padding = <%= @cube_padding %>;

  init();
  animate();

  function init() {
    container = document.getElementById("container");
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera( 70, innerWidth / innerHeight, 1, 100000 );
    camera.position.x = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )/2) %>;
    camera.position.y = <%= (@lines.count * ( @cube_size + @cube_padding )/4) %>;
    camera.position.z = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )/2)%>;
    scene.add( camera );

    // Cubes
    <% @lines.each_with_index do |line, index_line| %>
      position_y = 200 - (<%= index_line %> * (cube_size + cube_padding)) ;
      <% line.each_with_index do |cube, index_cube| %>
        position_x = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )/2) * -1%> + (<%= index_cube %> * (cube_size + cube_padding));
        <% if @show_grid == "true" %>  
        var plane = new THREE.Mesh(new THREE.PlaneGeometry(1,<%= (@max_cubes_per_line * ( @cube_size + @cube_padding )) / 2 %>), new THREE.MeshBasicMaterial({color: 0x000fff }));
        plane.doubleSided = true;
        plane.overdraw = true;
        plane.position.z = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )) / 4 * -1%>;
        plane.position.y = position_y;
        plane.position.x = position_x;
        scene.add(plane);
        <% end %>
        materials = [];
        for ( var i = 0; i < 6; i ++ ) {
          cube_color = new THREE.Color();
          cube_color.setRGB(
              <%= Setting.for_key("color_of-#{cube[:char]}-(r,g,b)").split(",")[0].to_f / 255 %>,
              <%= Setting.for_key("color_of-#{cube[:char]}-(r,g,b)").split(",")[1].to_f / 255 %>,
              <%= Setting.for_key("color_of-#{cube[:char]}-(r,g,b)").split(",")[2].to_f / 255 %>
          );
          materials.push( new THREE.MeshBasicMaterial( { color: cube_color.getHex()} ) );
        }
        
        <% if @calculation == "charcount" %>
          position_z = -<%= (cube[:count] * ( @cube_size + @cube_padding )) %> ;
        <% else %>
          position_z = 0;
        <% end %>
        cube_<%= index_cube %> = 
          new THREE.Mesh( 
              new THREE.CubeGeometry( 
                cube_size, cube_size, cube_size, 1, 1, 1, materials 
              ),
              new THREE.MeshFaceMaterial() 
          );
        cube_<%= index_cube %>.position.y = position_y;
        cube_<%= index_cube %>.position.x = position_x;
        cube_<%= index_cube %>.position.z = position_z;
        <% unless cube[:char] == " " %>
          scene.add( cube_<%= index_cube %> );
        <% end %>
      <% end %>
    <% end %>


    <% if Setting.for_key("Rendering_Engine_canvas_or_webGL", "canvas") == "canvas" %>
      renderer = new THREE.CanvasRenderer();
    <% else %>
      renderer = new THREE.WebGLRenderer();
    <% end %>
    renderer.setSize( innerWidth , innerHeight );

    container.appendChild( renderer.domElement );

    document.addEventListener( 'mousedown', onDocumentMouseDown, false );
    document.addEventListener( 'touchstart', onDocumentTouchStart, false );
    document.addEventListener( 'touchmove', onDocumentTouchMove, false );

    $("#button_3d").bind("click", function(){ 
        targetRotation = 0;
        camera.position.x = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )/2) %>;
        camera.position.y = <%= (@lines.count * ( @cube_size + @cube_padding )/4) %>;
        camera.position.z = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )/2)%>;
    });

    $("#button_2d").bind("click", function(){ 
        targetRotation = 0;
        camera.position.x = 0;
        camera.position.y = 0;
        camera.position.z = <%= (@max_cubes_per_line * ( @cube_size + @cube_padding )/2)%>;
        camera.lookAt(scene.position);
    });

    $("#button_left").bind("click", function(){ 
      targetRotation = 0;
      camera.position.x = x * Math.cos(0.1) + z * Math.sin(0.1);
      camera.position.z = z * Math.cos(0.1) - x * Math.sin(0.1);
      camera.lookAt(scene.position);
    });

    $("#button_right").bind("click", function(){ 
      targetRotation = 0;
      camera.position.x = x * Math.cos(0.1) - z * Math.sin(0.1);
      camera.position.z = z * Math.cos(0.1) + x * Math.sin(0.1);
      camera.lookAt(scene.position);
    });


    $("#button_up").bind("click", function(){ 
      camera.position.x -= 10;
      camera.position.z -= 10;
    }); 


    $("#button_down").bind("click", function(){ 
      camera.position.x += 10;
      camera.position.z += 10;
    });

  }

  //

  function onDocumentMouseDown( event ) {

    //event.preventDefault();
    targetRotation = 0;
    document.addEventListener( 'mousemove', onDocumentMouseMove, false );
    document.addEventListener( 'mouseup', onDocumentMouseUp, false );
    document.addEventListener( 'mouseout', onDocumentMouseOut, false );

    mouseXOnMouseDown = event.clientX - windowHalfX;
    mouseYOnMouseDown = event.clientY - windowHalfY;
    targetRotationOnMouseDown = targetRotation;
    targetRotationXOnMouseDown = targetRotationX;
  }

  function onDocumentMouseMove( event ) {

    mouseX = event.clientX - windowHalfX;
    mouseY = event.clientY - windowHalfY;

    targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.002;
    targetRotationX = targetRotationXOnMouseDown + ( mouseY - mouseYOnMouseDown ) * 0.002;
  }

  function onDocumentMouseUp( event ) {

    document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
    document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
    document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
  }

  function onDocumentMouseOut( event ) {

    document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
    document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
    document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
  }

  function onDocumentTouchStart( event ) {

    if ( event.touches.length == 1 ) {

      event.preventDefault();

      mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
      mouseYOnMouseDown = event.touches[ 0 ].pageY - windowHalfY;
      targetRotationOnMouseDown = targetRotation;

      targetRotationXOnMouseDown = targetRotationX;

    }
  }

  function onDocumentTouchMove( event ) {

    if ( event.touches.length == 1 ) {

      event.preventDefault();

      mouseX = event.touches[ 0 ].pageX - windowHalfX;
      mouseY = event.touches[ 0 ].pageY - windowHalfY;
      targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;
      targetRotationX = targetRotationXOnMouseDown + ( mouseY - mouseYOnMouseDown ) * 0.05;

    }
  }

  //

  function animate() {

    requestAnimationFrame( animate );
    render();

  }

  
  function render() {

    x = camera.position.x;
    z = camera.position.z;
    <% if @navigation_3d == "true"  %>
      camera.position.y = x * Math.cos(targetRotationX/10) + z * Math.sin(targetRotationX/10);
    <% end %>
    camera.position.x = x * Math.cos(targetRotation/10) + z * Math.sin(targetRotation/10);
    camera.position.z = z * Math.cos(targetRotation/10) - x * Math.sin(targetRotation/10);
    camera.lookAt(scene.position);


    
    //camera.position.y = ( targetRotation - camera.rotation.y ) * 0.05; 

    renderer.render( scene, camera );

  }
});
